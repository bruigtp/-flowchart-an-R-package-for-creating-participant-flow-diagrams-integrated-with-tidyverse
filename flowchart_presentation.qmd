---
title: "{flowchart}: an R package for creating participant flow diagrams integrated with tidyverse"
author: "Pau Satorra"
institute: 
  - "Germans Trias i Pujol Research Institute and Hospital (IGTP)<br> Badalona, Spain"
date: "2024-07-11"
date-format: long
format:
  revealjs:
    code-line-numbers: false
    footer: "useR! 2024 - {flowchart}"
    logo: WWW/logo.png
    css: WWW/styles.css
    template-partials:
      - WWW/title-slide.html
    self-contained: true
---

# Introduction

## Motivation

-   In any study, the flow of subjects must be clear and the process transparent, especially in health research studies

-   The CONSORT, STROBE and ICH guidelines reflect this need

-   The preferred way to present this patient flow through the different phases is a flowchart (also called flow diagram)

-   The creation of the flowchart is a joint task between researchers, data management team and statisticians

## Motivation

-   There are several R packages dedicated to building flowcharts: {Gmisc}, {DiagrammeR}, {consort}, {ggflowchart}

- Complex programming and manual parameterization are often involved

- Some are designed for building other kind of diagrams

## {flowchart} package {.smaller}

-   Creates reproducible flowcharts from a dataset in an easy way

-   Provides a set of functions that can be combined with the pipe operator (\|\> or %\>%)

<center>

![flowchart CRAN page](WWW/flowchart_CRAN.png){width="90%"}

</center>

## Overview

::: columns
::: {.column width="50%"}
-   Create a flowchart

    -   `as_fc()`

    -   `fc_draw()`

    -   `fc_split()`

    -   `fc_filter()`
    
-   Customize flowcharts

    -   `fc_modify()`
:::

::: {.column width="50%"}
-   Combine flowcharts

    -   `fc_merge()`

    -   `fc_stack()`

-   Export flowcharts

    -   `fc_export()`
:::
:::

## `safo` dataset {.smaller}

-   Built-in dataset 

-   Randomly generated dataset from the SAFO clinical trial[^1]

[^1]: Grillo, S., Pujol, M., Mir√≥, J.M. et al. Cloxacillin plus fosfomycin versus cloxacillin alone for methicillin-susceptible <i>Staphylococcus aureus</i> bacteremia: a randomized trial. Nat Med 29, 2518--2525 (2023)

```{r echo=FALSE}
library(flowchart)
library(tidyverse)
head(safo[, c("id", "inclusion_crit", "exclusion_crit", "decline_part", "group", "itt", "pp")]) |> 
  gt::gt() |> 
  gt::cols_align("center")
```

# Create a flowchart

## `as_fc()` 

-   Allows to initialize a dataset in the class `fc` created for this package

-   Creates a flowchart with an initial box showing the total number of rows of the dataset

```{r echo=TRUE}
library(flowchart)

safo_fc <- safo |> 
  as_fc()
```

## `as_fc()` {auto-animate="true"}

-   Allows to initialize a dataset in the class `fc` created for this package

-   Creates a flowchart with an initial box showing the total number of rows of the dataset

```{r echo=TRUE}
library(flowchart)

safo_fc <- safo |> 
  as_fc()

str(safo_fc, max.level = 1)
```


## `as_fc()` {.smaller auto-animate="true"}

::: {style="position: absolute; left: 50%; top: 50%;-webkit-transform: translate(-50%, -50%); transform: translate(-50%, -50%);"}

`safo_fc$fc`

```{r echo=FALSE}
safo_fc$fc |> gt::gt()
```

:::

## `fc_draw()`

-   Allows to draw a previously created `fc` object

```{r echo=TRUE, eval=FALSE}
safo |> 
  as_fc()
```

## `fc_draw()` {auto-animate="true"}

-   Allows to draw a previously created `fc` object

```{r echo=TRUE, fig.width = 5, fig.height = 2, fig.align = "center"}
safo |> 
  as_fc() |> 
  fc_draw()
```

## `fc_draw()` {auto-animate="true"}

-   Allows to draw a previously created `fc` object

```{r echo=TRUE, fig.width = 4, fig.height = 2, fig.align = "center"}
#| classes: custom2
safo |> 
  as_fc(label = "Patients assessed for eligibility") |> 
  fc_draw()
```

-   We can use the `label` argument to modify the box label

## `fc_filter()` 

-   We can filter an existing flowchart specifying the logic in which the filter is to be applied

```{r echo=TRUE, fig.width = 3, fig.height = 2, out.width = "600"}
#| classes: custom2
#| output-location: "column"
safo |> 
  as_fc(label = "Patients assessed for eligibility") |> 
  fc_draw()
```

## `fc_filter()` {auto-animate="true"}

-   We can filter an existing flowchart specifying the logic in which the filter is to be applied

```{r echo=TRUE, fig.width = 3, fig.height = 3, out.width = "600"}
#| classes: custom
#| output-location: "column"
safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(!is.na(group)) |> 
  fc_draw()
```

## `fc_filter()` {auto-animate="true"}

-   We can filter an existing flowchart specifying the logic in which the filter is to be applied

```{r echo=TRUE, fig.width = 3, fig.height = 3, out.width = "600"}
#| classes: custom
#| output-location: "column"
safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(!is.na(group), label = "Randomized") |> 
  fc_draw()
```

::: {style="margin-top: -15%;"}
-   We can change again the `label`
:::

## `fc_filter()` {auto-animate="true"}

-   We can filter an existing flowchart specifying the logic in which the filter is to be applied

```{r echo=TRUE, fig.width = 4, fig.height = 4, out.width = "800"}
#| classes: custom
#| output-location: "column"
safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(!is.na(group), label = "Randomized", show_exc = TRUE) |> 
  fc_draw()
```

::: {style="margin-top: -15%;"}
-   We can change again the `label`

-   We can use `show_exc=TRUE` to show the excluded rows
:::

## `fc_split()` 

-   We can split an existing flowchart according to the different values of a column

```{r echo=TRUE, fig.width = 4, fig.height = 4, out.width = "800"}
#| classes: custom
#| output-location: "column"
safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(!is.na(group), label = "Randomized", show_exc = TRUE) |> 
  fc_draw()
```

## `fc_split()` {auto-animate="true"}

-   We can split an existing flowchart according to the different values of a column

```{r echo=TRUE, fig.width = 4, fig.height = 5, out.width = "600"}
#| classes: custom
#| output-location: "column"
safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(!is.na(group), label = "Randomized", show_exc = TRUE) |> 
  fc_split(group) |> 
  fc_draw()
```

# Customize flowcharts

## Modify function arguments

::: {style="font-size: 27px;"}
-   Some arguments common to `as_fc()`, `fc_filter()` and `fc_split()`, to customise the appearance of the boxes created at each step

<table>
<tbody>
  <tr>
   <td style="text-align:left;"> `label=` </td>
   <td style="text-align:left;"> modify the label. </td>
  </tr>
  <tr>
   <td style="text-align:left;"> `text_pattern=` </td>
   <td style="text-align:left;"> modify the pattern of the text (e.g. `{label}\n {n} ({perc}%)`. </td>
  </tr>
  <tr>
   <td style="text-align:left;"> `just=` </td>
   <td style="text-align:left;"> modify the justification for the text. </td>
  </tr>
  <tr>
   <td style="text-align:left;"> `text_color=` </td>
   <td style="text-align:left;"> modify the color of the text. </td>
  </tr>
  <tr>
   <td style="text-align:left;"> `text_fs=` </td>
   <td style="text-align:left;"> modify the font size of the text. </td>
  </tr>
  <tr>
   <td style="text-align:left;"> `bg_fill=` </td>
   <td style="text-align:left;"> modify the background color of the box. </td>
  </tr>
  <tr>
   <td style="text-align:left;"> `border_color=` </td>
   <td style="text-align:left;"> modify the border color of the box. </td>
  </tr>
</tbody>
</table>

:::

::: {style="font-size: 27px; margin-top: 2%;"}

- Other arguments specific to each function (vignette)

:::

## `fc_modify()` {auto-animate="true"}

-   We can modify the parameters of the created flowchart

```{r echo=TRUE, fig.width = 4, fig.height = 5, out.width = "600"}
#| classes: custom
#| output-location: "column"
safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(!is.na(group), label = "Randomized", show_exc = TRUE) |> 
  fc_draw()
```

## `fc_modify()` {auto-animate="true"}

-   We can modify the parameters of the created flowchart

```{r echo=TRUE, eval=FALSE}
safo_fc <- safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(!is.na(group), label = "Randomized", show_exc = TRUE)
  
safo_fc$fc
```

```{r echo=FALSE, fig.width = 4, fig.height = 5, out.width = "600"}
safo_fc <- safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(!is.na(group), label = "Randomized", show_exc = TRUE)

safo_fc$fc |> 
  gt::gt() 
```

## `fc_modify()` {auto-animate="true"}

-   We can modify the parameters of the created flowchart

```{r echo=TRUE, fig.width = 7, fig.height = 5, out.width = "1500"}
#| classes: custom2
#| output-location: "slide"
safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(!is.na(group), label = "Randomized", show_exc = TRUE) |> 
  fc_modify(
    ~ . |> 
      mutate(
        text = ifelse(id == 3, str_glue("- {sum(safo$inclusion_crit == 'Yes')} not met the inclusion criteria\n- {sum(safo$exclusion_crit == 'Yes')} met the exclusion criteria"), text),
        x = ifelse(id == 3, 0.75, x)
      )
  ) |> 
  fc_draw()
```

# Combine flowcharts

## `fc_merge()` {auto-animate="true"}

-   We can combine different flowcharts horizontally

::: columns
::: {.column width="50%"}
```{r echo=TRUE, fig.width = 4, fig.height = 4, out.width = "1000"}
#| classes: custom
fc1 <- safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(itt == "Yes", label = "Intention to treat (ITT)")

fc_draw(fc1)
```
:::

::: {.column width="50%"}
```{r echo=TRUE, fig.width = 4, fig.height = 4, out.width = "800"}
#| classes: custom
fc2 <- safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(pp == "Yes", label = "Per protocol (PP)")

fc_draw(fc2)
```
:::
:::

## `fc_merge()` {auto-animate="true"}

-   We can combine different flowcharts horizontally

```{r echo=TRUE, eval=FALSE}
list(fc1, fc2) |>
  fc_merge()
```

## `fc_merge()` {auto-animate="true"}

-   We can combine different flowcharts horizontally

```{r echo=TRUE, fig.width = 5, fig.height = 4, out.width = "800"}
#| classes: custom2
list(fc1, fc2) |>
  fc_merge() |>
  fc_draw()
```

# Export flowcharts

## `fc_export()` {auto-animate="true"}

-   We can export the drawn flowchart to some of the most popular graphic devices: `png`, `jpeg`, `tiff` and `bmp`

```{r echo= TRUE, eval = FALSE}
safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(!is.na(group), label = "Randomized", show_exc = TRUE) |> 
  fc_draw() 
```

## `fc_export()` {auto-animate="true"}

-   We can export the drawn flowchart to some of the most popular graphic devices: `png`, `jpeg`, `tiff` and `bmp`

```{r echo=TRUE, eval = FALSE}
safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(!is.na(group), label = "Randomized", show_exc = TRUE) |> 
  fc_draw() |> 
  fc_export("flowchart.png")
```

## `fc_export()` {auto-animate="true"}

-   We can export the drawn flowchart to some of the most popular graphic devices: `png`, `jpeg`, `tiff` and `bmp`

```{r echo=TRUE, eval = FALSE}
safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(!is.na(group), label = "Randomized", show_exc = TRUE) |> 
  fc_draw() |> 
  fc_export("flowchart.png", width = 2500, height = 2000, res = 700)
```

-   We can customize the size and resolution of the image to save

# Hands-on examples

## Example 1 {auto-animate="true"}

-   We will try to build a flowchart for the complete participant flow of the SAFO study trial

## Example 1 {auto-animate="true"}

```{r echo=TRUE, fig.width = 4, fig.height = 4, out.width = "600"}
#| classes: custom
#| output-location: "column"
safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_draw()
```

## Example 1 {auto-animate="true"}

```{r echo=TRUE, fig.width = 4, fig.height = 4, out.width = "600"}
#| classes: custom
#| output-location: "column"
safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(!is.na(group), label = "Randomized", show_exc = TRUE) |> 
  fc_draw()
```

## Example 1 {auto-animate="true"}

```{r echo=TRUE, fig.width = 4, fig.height = 5, out.width = "600"}
#| classes: custom
#| output-location: "column"
safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(!is.na(group), label = "Randomized", show_exc = TRUE) |> 
  fc_split(group) |> 
  fc_draw()
```

## Example 1 {auto-animate="true"}

```{r echo=TRUE, fig.width = 4, fig.height = 7, out.width = "450"}
#| classes: custom
#| output-location: "column"
safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(!is.na(group), label = "Randomized", show_exc = TRUE) |> 
  fc_split(group) |> 
  fc_filter(itt == "Yes", label = "Included in ITT") |> 
  fc_draw()
```

## Example 1 {auto-animate="true"}

```{r echo=TRUE, fig.width = 4, fig.height = 7, out.width = "450"}
#| classes: custom4
#| output-location: "column"
safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(!is.na(group), label = "Randomized", show_exc = TRUE) |> 
  fc_split(group) |> 
  fc_filter(itt == "Yes", label = "Included in ITT") |> 
  fc_filter(pp == "Yes", label = "Included in PP") |> 
  fc_draw()
```

## Example 1 {auto-animate="true"}

-   In the vignette there is the full example to exactly reproduce the flowchart found in the SAFO article:

<center><small> Grillo, S., Pujol, M., Mir√≥, J.M. et al. Cloxacillin plus fosfomycin versus cloxacillin alone for methicillin-susceptible <i>Staphylococcus aureus</i> bacteremia: a randomized trial. Nat Med 29, 2518--2525 (2023). <href>https://doi.org/10.1038/s41591-023-02569-0</href> </small></center>

## Example 2 {auto-animate="true"}

-   Now, we will create a flowchart without any dataset using the `N=` argument

## Example 2 {auto-animate="true"}

```{r echo=TRUE, fig.width = 3, fig.height = 3, out.width = "800"}
#| classes: custom
#| output-location: "column"
as_fc(N = 300) |> 
  fc_draw()
```

## Example 2 {auto-animate="true"}

```{r echo=TRUE, fig.width = 4, fig.height = 4, out.width = "800"}
#| classes: custom
#| output-location: "column"
as_fc(N = 300) |>
  fc_filter(N = 240, label = "Randomized patients", show_exc = TRUE) |> 
  fc_draw()
```

## Example 2 {auto-animate="true"}

```{r echo=TRUE, fig.width = 4, fig.height = 5, out.width = "600"}
#| classes: custom
#| output-location: "column"
as_fc(N = 300) |>
  fc_filter(N = 240, label = "Randomized patients", show_exc = TRUE) |> 
  fc_split(N = c(100, 80, 60), label = c("Group A", "Group B", "Group C")) |>
  fc_draw()
```

## Example 2 {auto-animate="true"}

```{r echo=TRUE, fig.width = 4, fig.height = 5.5, out.width = "400"}
#| classes: custom5
#| output-location: "column"
as_fc(N = 300) |>
  fc_filter(N = 240, label = "Randomized patients", show_exc = TRUE) |> 
  fc_split(N = c(100, 80, 60), label = c("Group A", "Group B", "Group C")) |>
  fc_filter(N = c(80, 75, 50), label = "Finished the study") |> 
  fc_draw()
```

# Summary

## Conclusions

::: {style="font-size: 35px"}
-   A clear and detailed reporting of the flow of participants in health research studies is required and recommended

-   With this package, flowchart programming in R is made easier and accessible within the tidyverse workflow

-   Flowchart reproducibility is assured

-   As a limitation, we have not considered all possible scenarios and study designs, although is highly customizable

-   As future developments:

    -   Define style themes

    -   Shiny application
:::

## More information {.smaller}     

-   You can visit the {flowchart} website: <a href = "https://bruigtp.github.io/flowchart/">https://bruigtp.github.io/flowchart/</a>

<center>

![](WWW/flowchart_website.png){width="75%"}
</center>

## Contact {.smaller}

IGTP Biostatistics Support and Research Unit:

::: columns
::: {.column width="25%"}
Pau Satorra

<small>Author, maintainer</small> <small><a href = "psatorra@igtp.cat">psatorra\@igtp.cat</a></small>
:::

::: {.column width="25%"}
Jo√£o Carmezim

<small>Author</small>
:::

::: {.column width="25%"}
Nat√†lia Pallar√®s

<small>Author</small>
:::

::: {.column width="25%"}
Cristian Teb√©

<small>Author</small>
:::
:::

<center>
`r fontawesome::fa("github")` [github.com/bruigtp](https://github.com/bruigtp/)
</center>

<br>

::: columns
::: {.column width="50%"}
<center>
![](WWW/repos1.png)
</center>
:::
::: {.column width="50%"}
<center>
![](WWW/repos2.png)
</center>
:::
:::

## 

::: {style="position: absolute; left: 50%; top: 50%;-webkit-transform: translate(-50%, -50%); transform: translate(-50%, -50%);"}
<center>
![](WWW/flowchart.png){width="75%"}
<h2>Thank you!</h2>
</center>
:::
